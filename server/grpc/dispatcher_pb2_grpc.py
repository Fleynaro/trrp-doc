# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dispatcher_pb2 as dispatcher__pb2


class DispatcherServiceStub(object):
    """сервис по работе со множеством серверов
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDocServer = channel.unary_unary(
                '/doc.DispatcherService/GetDocServer',
                request_serializer=dispatcher__pb2.DocServerRequest.SerializeToString,
                response_deserializer=dispatcher__pb2.DocServer.FromString,
                )
        self.GetDocuments = channel.unary_unary(
                '/doc.DispatcherService/GetDocuments',
                request_serializer=dispatcher__pb2.DocumentsRequest.SerializeToString,
                response_deserializer=dispatcher__pb2.DocumentsResponse.FromString,
                )
        self.AddDocServer = channel.unary_unary(
                '/doc.DispatcherService/AddDocServer',
                request_serializer=dispatcher__pb2.AddDocServerRequest.SerializeToString,
                response_deserializer=dispatcher__pb2.AddDocServerResponse.FromString,
                )


class DispatcherServiceServicer(object):
    """сервис по работе со множеством серверов
    """

    def GetDocServer(self, request, context):
        """получение сервера по ид документа
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDocuments(self, request, context):
        """получение списка документов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDocServer(self, request, context):
        """добавление нового сервера документов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DispatcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDocServer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDocServer,
                    request_deserializer=dispatcher__pb2.DocServerRequest.FromString,
                    response_serializer=dispatcher__pb2.DocServer.SerializeToString,
            ),
            'GetDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDocuments,
                    request_deserializer=dispatcher__pb2.DocumentsRequest.FromString,
                    response_serializer=dispatcher__pb2.DocumentsResponse.SerializeToString,
            ),
            'AddDocServer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDocServer,
                    request_deserializer=dispatcher__pb2.AddDocServerRequest.FromString,
                    response_serializer=dispatcher__pb2.AddDocServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'doc.DispatcherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DispatcherService(object):
    """сервис по работе со множеством серверов
    """

    @staticmethod
    def GetDocServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DispatcherService/GetDocServer',
            dispatcher__pb2.DocServerRequest.SerializeToString,
            dispatcher__pb2.DocServer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DispatcherService/GetDocuments',
            dispatcher__pb2.DocumentsRequest.SerializeToString,
            dispatcher__pb2.DocumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDocServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DispatcherService/AddDocServer',
            dispatcher__pb2.AddDocServerRequest.SerializeToString,
            dispatcher__pb2.AddDocServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

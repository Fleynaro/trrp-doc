# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import document_pb2 as document__pb2


class DocumentServiceStub(object):
    """сервис по работе с одним документом
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddDocument = channel.unary_unary(
                '/doc.DocumentService/AddDocument',
                request_serializer=document__pb2.AddDocumentRequest.SerializeToString,
                response_deserializer=document__pb2.AddDocumentResponse.FromString,
                )
        self.GetActualDocumentContent = channel.unary_unary(
                '/doc.DocumentService/GetActualDocumentContent',
                request_serializer=document__pb2.DocumentContentRequest.SerializeToString,
                response_deserializer=document__pb2.DocumentContentResponse.FromString,
                )
        self.GetDocumentChanges = channel.unary_unary(
                '/doc.DocumentService/GetDocumentChanges',
                request_serializer=document__pb2.DocumentChangesRequest.SerializeToString,
                response_deserializer=document__pb2.DocumentChanges.FromString,
                )
        self.SendDocumentChanges = channel.unary_unary(
                '/doc.DocumentService/SendDocumentChanges',
                request_serializer=document__pb2.DocumentChanges.SerializeToString,
                response_deserializer=document__pb2.DocumentChangesResponse.FromString,
                )


class DocumentServiceServicer(object):
    """сервис по работе с одним документом
    """

    def AddDocument(self, request, context):
        """добавление документа
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActualDocumentContent(self, request, context):
        """получение контента документа актуальной версии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDocumentChanges(self, request, context):
        """получить изменения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDocumentChanges(self, request, context):
        """отправить изменения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDocument,
                    request_deserializer=document__pb2.AddDocumentRequest.FromString,
                    response_serializer=document__pb2.AddDocumentResponse.SerializeToString,
            ),
            'GetActualDocumentContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActualDocumentContent,
                    request_deserializer=document__pb2.DocumentContentRequest.FromString,
                    response_serializer=document__pb2.DocumentContentResponse.SerializeToString,
            ),
            'GetDocumentChanges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDocumentChanges,
                    request_deserializer=document__pb2.DocumentChangesRequest.FromString,
                    response_serializer=document__pb2.DocumentChanges.SerializeToString,
            ),
            'SendDocumentChanges': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDocumentChanges,
                    request_deserializer=document__pb2.DocumentChanges.FromString,
                    response_serializer=document__pb2.DocumentChangesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'doc.DocumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentService(object):
    """сервис по работе с одним документом
    """

    @staticmethod
    def AddDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DocumentService/AddDocument',
            document__pb2.AddDocumentRequest.SerializeToString,
            document__pb2.AddDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActualDocumentContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DocumentService/GetActualDocumentContent',
            document__pb2.DocumentContentRequest.SerializeToString,
            document__pb2.DocumentContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDocumentChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DocumentService/GetDocumentChanges',
            document__pb2.DocumentChangesRequest.SerializeToString,
            document__pb2.DocumentChanges.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendDocumentChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doc.DocumentService/SendDocumentChanges',
            document__pb2.DocumentChanges.SerializeToString,
            document__pb2.DocumentChangesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
